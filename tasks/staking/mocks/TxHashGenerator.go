// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TxHashGenerator is an autogenerated mock type for the TxHashGenerator type
type TxHashGenerator struct {
	mock.Mock
}

// AddDelegatorTxHash provides a mock function with given fields:
func (_m *TxHashGenerator) AddDelegatorTxHash() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportTxHash provides a mock function with given fields:
func (_m *TxHashGenerator) ExportTxHash() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportTxHash provides a mock function with given fields:
func (_m *TxHashGenerator) ImportTxHash() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTxHashGenerator interface {
	mock.TestingT
	Cleanup(func())
}

// NewTxHashGenerator creates a new instance of TxHashGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTxHashGenerator(t mockConstructorTestingTNewTxHashGenerator) *TxHashGenerator {
	mock := &TxHashGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
