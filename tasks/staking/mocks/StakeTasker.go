// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	evm "github.com/ava-labs/coreth/plugin/evm"
	mock "github.com/stretchr/testify/mock"

	platformvm "github.com/ava-labs/avalanchego/vms/platformvm"
)

// StakeTasker is an autogenerated mock type for the StakeTasker type
type StakeTasker struct {
	mock.Mock
}

// AddDelegatorTxHash provides a mock function with given fields:
func (_m *StakeTasker) AddDelegatorTxHash() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportTxHash provides a mock function with given fields:
func (_m *StakeTasker) ExportTxHash() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSignedAddDelegatorTx provides a mock function with given fields:
func (_m *StakeTasker) GetSignedAddDelegatorTx() (*platformvm.Tx, error) {
	ret := _m.Called()

	var r0 *platformvm.Tx
	if rf, ok := ret.Get(0).(func() *platformvm.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platformvm.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSignedExportTx provides a mock function with given fields:
func (_m *StakeTasker) GetSignedExportTx() (*evm.Tx, error) {
	ret := _m.Called()

	var r0 *evm.Tx
	if rf, ok := ret.Get(0).(func() *evm.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evm.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSignedImportTx provides a mock function with given fields:
func (_m *StakeTasker) GetSignedImportTx() (*platformvm.Tx, error) {
	ret := _m.Called()

	var r0 *platformvm.Tx
	if rf, ok := ret.Get(0).(func() *platformvm.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platformvm.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportTxHash provides a mock function with given fields:
func (_m *StakeTasker) ImportTxHash() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAddDelegatorTxSig provides a mock function with given fields: sig
func (_m *StakeTasker) SetAddDelegatorTxSig(sig [65]byte) error {
	ret := _m.Called(sig)

	var r0 error
	if rf, ok := ret.Get(0).(func([65]byte) error); ok {
		r0 = rf(sig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetExportTxSig provides a mock function with given fields: sig
func (_m *StakeTasker) SetExportTxSig(sig [65]byte) error {
	ret := _m.Called(sig)

	var r0 error
	if rf, ok := ret.Get(0).(func([65]byte) error); ok {
		r0 = rf(sig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetImportTxSig provides a mock function with given fields: sig
func (_m *StakeTasker) SetImportTxSig(sig [65]byte) error {
	ret := _m.Called(sig)

	var r0 error
	if rf, ok := ret.Get(0).(func([65]byte) error); ok {
		r0 = rf(sig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStakeTasker interface {
	mock.TestingT
	Cleanup(func())
}

// NewStakeTasker creates a new instance of StakeTasker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStakeTasker(t mockConstructorTestingTNewStakeTasker) *StakeTasker {
	mock := &StakeTasker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
