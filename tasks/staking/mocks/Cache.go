// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	events "github.com/avalido/mpc-controller/events"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// GetGeneratedPubKeyInfo provides a mock function with given fields: genPubKeyHashHex
func (_m *Cache) GetGeneratedPubKeyInfo(genPubKeyHashHex string) *events.GeneratedPubKeyInfo {
	ret := _m.Called(genPubKeyHashHex)

	var r0 *events.GeneratedPubKeyInfo
	if rf, ok := ret.Get(0).(func(string) *events.GeneratedPubKeyInfo); ok {
		r0 = rf(genPubKeyHashHex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*events.GeneratedPubKeyInfo)
		}
	}

	return r0
}

// GetMyIndex provides a mock function with given fields: myPubKeyHashHex, genPubKeyHashHex
func (_m *Cache) GetMyIndex(myPubKeyHashHex string, genPubKeyHashHex string) *big.Int {
	ret := _m.Called(myPubKeyHashHex, genPubKeyHashHex)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(string, string) *big.Int); ok {
		r0 = rf(myPubKeyHashHex, genPubKeyHashHex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetParticipantKeys provides a mock function with given fields: genPubKeyHash, indices
func (_m *Cache) GetParticipantKeys(genPubKeyHash common.Hash, indices []*big.Int) []string {
	ret := _m.Called(genPubKeyHash, indices)

	var r0 []string
	if rf, ok := ret.Get(0).(func(common.Hash, []*big.Int) []string); ok {
		r0 = rf(genPubKeyHash, indices)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

type mockConstructorTestingTNewCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCache(t mockConstructorTestingTNewCache) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
