// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	api "github.com/ava-labs/avalanchego/api"

	context "context"

	mock "github.com/stretchr/testify/mock"

	rpc "github.com/ava-labs/avalanchego/utils/rpc"
)

// RewardUTXOGetter is an autogenerated mock type for the RewardUTXOGetter type
type RewardUTXOGetter struct {
	mock.Mock
}

type RewardUTXOGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *RewardUTXOGetter) EXPECT() *RewardUTXOGetter_Expecter {
	return &RewardUTXOGetter_Expecter{mock: &_m.Mock}
}

// GetRewardUTXOs provides a mock function with given fields: _a0, _a1, _a2
func (_m *RewardUTXOGetter) GetRewardUTXOs(_a0 context.Context, _a1 *api.GetTxArgs, _a2 ...rpc.Option) ([][]byte, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func(context.Context, *api.GetTxArgs, ...rpc.Option) [][]byte); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.GetTxArgs, ...rpc.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RewardUTXOGetter_GetRewardUTXOs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRewardUTXOs'
type RewardUTXOGetter_GetRewardUTXOs_Call struct {
	*mock.Call
}

// GetRewardUTXOs is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *api.GetTxArgs
//  - _a2 ...rpc.Option
func (_e *RewardUTXOGetter_Expecter) GetRewardUTXOs(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *RewardUTXOGetter_GetRewardUTXOs_Call {
	return &RewardUTXOGetter_GetRewardUTXOs_Call{Call: _e.mock.On("GetRewardUTXOs",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *RewardUTXOGetter_GetRewardUTXOs_Call) Run(run func(_a0 context.Context, _a1 *api.GetTxArgs, _a2 ...rpc.Option)) *RewardUTXOGetter_GetRewardUTXOs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]rpc.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(rpc.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*api.GetTxArgs), variadicArgs...)
	})
	return _c
}

func (_c *RewardUTXOGetter_GetRewardUTXOs_Call) Return(_a0 [][]byte, _a1 error) *RewardUTXOGetter_GetRewardUTXOs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewRewardUTXOGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewRewardUTXOGetter creates a new instance of RewardUTXOGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRewardUTXOGetter(t mockConstructorTestingTNewRewardUTXOGetter) *RewardUTXOGetter {
	mock := &RewardUTXOGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
