// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// Receipter is an autogenerated mock type for the Receipter type
type Receipter struct {
	mock.Mock
}

type Receipter_Expecter struct {
	mock *mock.Mock
}

func (_m *Receipter) EXPECT() *Receipter_Expecter {
	return &Receipter_Expecter{mock: &_m.Mock}
}

// TransactionReceipt provides a mock function with given fields: ctx, txHash
func (_m *Receipter) TransactionReceipt(ctx context.Context, txHash common.Hash) (*types.Receipt, error) {
	ret := _m.Called(ctx, txHash)

	var r0 *types.Receipt
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *types.Receipt); ok {
		r0 = rf(ctx, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Receipt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Receipter_TransactionReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionReceipt'
type Receipter_TransactionReceipt_Call struct {
	*mock.Call
}

// TransactionReceipt is a helper method to define mock.On call
//  - ctx context.Context
//  - txHash common.Hash
func (_e *Receipter_Expecter) TransactionReceipt(ctx interface{}, txHash interface{}) *Receipter_TransactionReceipt_Call {
	return &Receipter_TransactionReceipt_Call{Call: _e.mock.On("TransactionReceipt", ctx, txHash)}
}

func (_c *Receipter_TransactionReceipt_Call) Run(run func(ctx context.Context, txHash common.Hash)) *Receipter_TransactionReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *Receipter_TransactionReceipt_Call) Return(r *types.Receipt, err error) *Receipter_TransactionReceipt_Call {
	_c.Call.Return(r, err)
	return _c
}

type mockConstructorTestingTNewReceipter interface {
	mock.TestingT
	Cleanup(func())
}

// NewReceipter creates a new instance of Receipter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReceipter(t mockConstructorTestingTNewReceipter) *Receipter {
	mock := &Receipter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
