// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/avalido/mpc-controller/core"
	mock "github.com/stretchr/testify/mock"
)

// SignDoner is an autogenerated mock type for the SignDoner type
type SignDoner struct {
	mock.Mock
}

// SignDone provides a mock function with given fields: ctx, request
func (_m *SignDoner) SignDone(ctx context.Context, request *core.SignRequest) (*core.Result, error) {
	ret := _m.Called(ctx, request)

	var r0 *core.Result
	if rf, ok := ret.Get(0).(func(context.Context, *core.SignRequest) *core.Result); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.SignRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSignDoner interface {
	mock.TestingT
	Cleanup(func())
}

// NewSignDoner creates a new instance of SignDoner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSignDoner(t mockConstructorTestingTNewSignDoner) *SignDoner {
	mock := &SignDoner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
