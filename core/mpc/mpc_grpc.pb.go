// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: mpc.proto

package mpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MpcClient is the client API for Mpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MpcClient interface {
	// Keygen defines a rpc handler method for MsgTransfer.
	Keygen(ctx context.Context, in *KeygenRequest, opts ...grpc.CallOption) (*KeygenResponse, error)
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error)
	CheckResult(ctx context.Context, in *CheckResultRequest, opts ...grpc.CallOption) (*CheckResultResponse, error)
}

type mpcClient struct {
	cc grpc.ClientConnInterface
}

func NewMpcClient(cc grpc.ClientConnInterface) MpcClient {
	return &mpcClient{cc}
}

func (c *mpcClient) Keygen(ctx context.Context, in *KeygenRequest, opts ...grpc.CallOption) (*KeygenResponse, error) {
	out := new(KeygenResponse)
	err := c.cc.Invoke(ctx, "/mpc.Mpc/Keygen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpcClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, "/mpc.Mpc/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpcClient) CheckResult(ctx context.Context, in *CheckResultRequest, opts ...grpc.CallOption) (*CheckResultResponse, error) {
	out := new(CheckResultResponse)
	err := c.cc.Invoke(ctx, "/mpc.Mpc/CheckResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MpcServer is the server API for Mpc service.
// All implementations must embed UnimplementedMpcServer
// for forward compatibility
type MpcServer interface {
	// Keygen defines a rpc handler method for MsgTransfer.
	Keygen(context.Context, *KeygenRequest) (*KeygenResponse, error)
	Sign(context.Context, *SignRequest) (*SignResponse, error)
	CheckResult(context.Context, *CheckResultRequest) (*CheckResultResponse, error)
	mustEmbedUnimplementedMpcServer()
}

// UnimplementedMpcServer must be embedded to have forward compatible implementations.
type UnimplementedMpcServer struct {
}

func (UnimplementedMpcServer) Keygen(context.Context, *KeygenRequest) (*KeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keygen not implemented")
}
func (UnimplementedMpcServer) Sign(context.Context, *SignRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedMpcServer) CheckResult(context.Context, *CheckResultRequest) (*CheckResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckResult not implemented")
}
func (UnimplementedMpcServer) mustEmbedUnimplementedMpcServer() {}

// UnsafeMpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MpcServer will
// result in compilation errors.
type UnsafeMpcServer interface {
	mustEmbedUnimplementedMpcServer()
}

func RegisterMpcServer(s grpc.ServiceRegistrar, srv MpcServer) {
	s.RegisterService(&Mpc_ServiceDesc, srv)
}

func _Mpc_Keygen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeygenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpcServer).Keygen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mpc.Mpc/Keygen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpcServer).Keygen(ctx, req.(*KeygenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpc_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpcServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mpc.Mpc/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpcServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpc_CheckResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpcServer).CheckResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mpc.Mpc/CheckResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpcServer).CheckResult(ctx, req.(*CheckResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mpc_ServiceDesc is the grpc.ServiceDesc for Mpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mpc.Mpc",
	HandlerType: (*MpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Keygen",
			Handler:    _Mpc_Keygen_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _Mpc_Sign_Handler,
		},
		{
			MethodName: "CheckResult",
			Handler:    _Mpc_CheckResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mpc.proto",
}
