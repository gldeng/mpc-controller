// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	chain "github.com/avalido/mpc-controller/chain"
	common "github.com/ethereum/go-ethereum/common"

	core "github.com/avalido/mpc-controller/core"

	ids "github.com/ava-labs/avalanchego/ids"

	logger "github.com/avalido/mpc-controller/logger"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/avalido/mpc-controller/storage"
)

// TaskContext is an autogenerated mock type for the TaskContext type
type TaskContext struct {
	mock.Mock
}

type TaskContext_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskContext) EXPECT() *TaskContext_Expecter {
	return &TaskContext_Expecter{mock: &_m.Mock}
}

// CheckCChainTx provides a mock function with given fields: id
func (_m *TaskContext) CheckCChainTx(id ids.ID) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(ids.ID) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ids.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskContext_CheckCChainTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckCChainTx'
type TaskContext_CheckCChainTx_Call struct {
	*mock.Call
}

// CheckCChainTx is a helper method to define mock.On call
//  - id ids.ID
func (_e *TaskContext_Expecter) CheckCChainTx(id interface{}) *TaskContext_CheckCChainTx_Call {
	return &TaskContext_CheckCChainTx_Call{Call: _e.mock.On("CheckCChainTx", id)}
}

func (_c *TaskContext_CheckCChainTx_Call) Run(run func(id ids.ID)) *TaskContext_CheckCChainTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ids.ID))
	})
	return _c
}

func (_c *TaskContext_CheckCChainTx_Call) Return(_a0 int, _a1 error) *TaskContext_CheckCChainTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CheckPChainTx provides a mock function with given fields: id
func (_m *TaskContext) CheckPChainTx(id ids.ID) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(ids.ID) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ids.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskContext_CheckPChainTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPChainTx'
type TaskContext_CheckPChainTx_Call struct {
	*mock.Call
}

// CheckPChainTx is a helper method to define mock.On call
//  - id ids.ID
func (_e *TaskContext_Expecter) CheckPChainTx(id interface{}) *TaskContext_CheckPChainTx_Call {
	return &TaskContext_CheckPChainTx_Call{Call: _e.mock.On("CheckPChainTx", id)}
}

func (_c *TaskContext_CheckPChainTx_Call) Run(run func(id ids.ID)) *TaskContext_CheckPChainTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ids.ID))
	})
	return _c
}

func (_c *TaskContext_CheckPChainTx_Call) Return(_a0 int, _a1 error) *TaskContext_CheckPChainTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Emit provides a mock function with given fields: event
func (_m *TaskContext) Emit(event interface{}) {
	_m.Called(event)
}

// TaskContext_Emit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Emit'
type TaskContext_Emit_Call struct {
	*mock.Call
}

// Emit is a helper method to define mock.On call
//  - event interface{}
func (_e *TaskContext_Expecter) Emit(event interface{}) *TaskContext_Emit_Call {
	return &TaskContext_Emit_Call{Call: _e.mock.On("Emit", event)}
}

func (_c *TaskContext_Emit_Call) Run(run func(event interface{})) *TaskContext_Emit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *TaskContext_Emit_Call) Return() *TaskContext_Emit_Call {
	_c.Call.Return()
	return _c
}

// GetDb provides a mock function with given fields:
func (_m *TaskContext) GetDb() storage.SlimDb {
	ret := _m.Called()

	var r0 storage.SlimDb
	if rf, ok := ret.Get(0).(func() storage.SlimDb); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.SlimDb)
		}
	}

	return r0
}

// TaskContext_GetDb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDb'
type TaskContext_GetDb_Call struct {
	*mock.Call
}

// GetDb is a helper method to define mock.On call
func (_e *TaskContext_Expecter) GetDb() *TaskContext_GetDb_Call {
	return &TaskContext_GetDb_Call{Call: _e.mock.On("GetDb")}
}

func (_c *TaskContext_GetDb_Call) Run(run func()) *TaskContext_GetDb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskContext_GetDb_Call) Return(_a0 storage.SlimDb) *TaskContext_GetDb_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetEventID provides a mock function with given fields: event
func (_m *TaskContext) GetEventID(event string) (common.Hash, error) {
	ret := _m.Called(event)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(string) common.Hash); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskContext_GetEventID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventID'
type TaskContext_GetEventID_Call struct {
	*mock.Call
}

// GetEventID is a helper method to define mock.On call
//  - event string
func (_e *TaskContext_Expecter) GetEventID(event interface{}) *TaskContext_GetEventID_Call {
	return &TaskContext_GetEventID_Call{Call: _e.mock.On("GetEventID", event)}
}

func (_c *TaskContext_GetEventID_Call) Run(run func(event string)) *TaskContext_GetEventID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TaskContext_GetEventID_Call) Return(_a0 common.Hash, _a1 error) *TaskContext_GetEventID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLogger provides a mock function with given fields:
func (_m *TaskContext) GetLogger() logger.Logger {
	ret := _m.Called()

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func() logger.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// TaskContext_GetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogger'
type TaskContext_GetLogger_Call struct {
	*mock.Call
}

// GetLogger is a helper method to define mock.On call
func (_e *TaskContext_Expecter) GetLogger() *TaskContext_GetLogger_Call {
	return &TaskContext_GetLogger_Call{Call: _e.mock.On("GetLogger")}
}

func (_c *TaskContext_GetLogger_Call) Run(run func()) *TaskContext_GetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskContext_GetLogger_Call) Return(_a0 logger.Logger) *TaskContext_GetLogger_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetMpcClient provides a mock function with given fields:
func (_m *TaskContext) GetMpcClient() core.MpcClient {
	ret := _m.Called()

	var r0 core.MpcClient
	if rf, ok := ret.Get(0).(func() core.MpcClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.MpcClient)
		}
	}

	return r0
}

// TaskContext_GetMpcClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMpcClient'
type TaskContext_GetMpcClient_Call struct {
	*mock.Call
}

// GetMpcClient is a helper method to define mock.On call
func (_e *TaskContext_Expecter) GetMpcClient() *TaskContext_GetMpcClient_Call {
	return &TaskContext_GetMpcClient_Call{Call: _e.mock.On("GetMpcClient")}
}

func (_c *TaskContext_GetMpcClient_Call) Run(run func()) *TaskContext_GetMpcClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskContext_GetMpcClient_Call) Return(_a0 core.MpcClient) *TaskContext_GetMpcClient_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetNetwork provides a mock function with given fields:
func (_m *TaskContext) GetNetwork() *chain.NetworkContext {
	ret := _m.Called()

	var r0 *chain.NetworkContext
	if rf, ok := ret.Get(0).(func() *chain.NetworkContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chain.NetworkContext)
		}
	}

	return r0
}

// TaskContext_GetNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetwork'
type TaskContext_GetNetwork_Call struct {
	*mock.Call
}

// GetNetwork is a helper method to define mock.On call
func (_e *TaskContext_Expecter) GetNetwork() *TaskContext_GetNetwork_Call {
	return &TaskContext_GetNetwork_Call{Call: _e.mock.On("GetNetwork")}
}

func (_c *TaskContext_GetNetwork_Call) Run(run func()) *TaskContext_GetNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskContext_GetNetwork_Call) Return(_a0 *chain.NetworkContext) *TaskContext_GetNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetParticipantID provides a mock function with given fields:
func (_m *TaskContext) GetParticipantID() storage.ParticipantId {
	ret := _m.Called()

	var r0 storage.ParticipantId
	if rf, ok := ret.Get(0).(func() storage.ParticipantId); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.ParticipantId)
		}
	}

	return r0
}

// TaskContext_GetParticipantID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParticipantID'
type TaskContext_GetParticipantID_Call struct {
	*mock.Call
}

// GetParticipantID is a helper method to define mock.On call
func (_e *TaskContext_Expecter) GetParticipantID() *TaskContext_GetParticipantID_Call {
	return &TaskContext_GetParticipantID_Call{Call: _e.mock.On("GetParticipantID")}
}

func (_c *TaskContext_GetParticipantID_Call) Run(run func()) *TaskContext_GetParticipantID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskContext_GetParticipantID_Call) Return(_a0 storage.ParticipantId) *TaskContext_GetParticipantID_Call {
	_c.Call.Return(_a0)
	return _c
}

// IssueCChainTx provides a mock function with given fields: txBytes
func (_m *TaskContext) IssueCChainTx(txBytes []byte) (ids.ID, error) {
	ret := _m.Called(txBytes)

	var r0 ids.ID
	if rf, ok := ret.Get(0).(func([]byte) ids.ID); ok {
		r0 = rf(txBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ids.ID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(txBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskContext_IssueCChainTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IssueCChainTx'
type TaskContext_IssueCChainTx_Call struct {
	*mock.Call
}

// IssueCChainTx is a helper method to define mock.On call
//  - txBytes []byte
func (_e *TaskContext_Expecter) IssueCChainTx(txBytes interface{}) *TaskContext_IssueCChainTx_Call {
	return &TaskContext_IssueCChainTx_Call{Call: _e.mock.On("IssueCChainTx", txBytes)}
}

func (_c *TaskContext_IssueCChainTx_Call) Run(run func(txBytes []byte)) *TaskContext_IssueCChainTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *TaskContext_IssueCChainTx_Call) Return(_a0 ids.ID, _a1 error) *TaskContext_IssueCChainTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// IssuePChainTx provides a mock function with given fields: txBytes
func (_m *TaskContext) IssuePChainTx(txBytes []byte) (ids.ID, error) {
	ret := _m.Called(txBytes)

	var r0 ids.ID
	if rf, ok := ret.Get(0).(func([]byte) ids.ID); ok {
		r0 = rf(txBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ids.ID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(txBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskContext_IssuePChainTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IssuePChainTx'
type TaskContext_IssuePChainTx_Call struct {
	*mock.Call
}

// IssuePChainTx is a helper method to define mock.On call
//  - txBytes []byte
func (_e *TaskContext_Expecter) IssuePChainTx(txBytes interface{}) *TaskContext_IssuePChainTx_Call {
	return &TaskContext_IssuePChainTx_Call{Call: _e.mock.On("IssuePChainTx", txBytes)}
}

func (_c *TaskContext_IssuePChainTx_Call) Run(run func(txBytes []byte)) *TaskContext_IssuePChainTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *TaskContext_IssuePChainTx_Call) Return(_a0 ids.ID, _a1 error) *TaskContext_IssuePChainTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NonceAt provides a mock function with given fields: account
func (_m *TaskContext) NonceAt(account common.Address) (uint64, error) {
	ret := _m.Called(account)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskContext_NonceAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NonceAt'
type TaskContext_NonceAt_Call struct {
	*mock.Call
}

// NonceAt is a helper method to define mock.On call
//  - account common.Address
func (_e *TaskContext_Expecter) NonceAt(account interface{}) *TaskContext_NonceAt_Call {
	return &TaskContext_NonceAt_Call{Call: _e.mock.On("NonceAt", account)}
}

func (_c *TaskContext_NonceAt_Call) Run(run func(account common.Address)) *TaskContext_NonceAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *TaskContext_NonceAt_Call) Return(_a0 uint64, _a1 error) *TaskContext_NonceAt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTaskContext interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskContext creates a new instance of TaskContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskContext(t mockConstructorTestingTNewTaskContext) *TaskContext {
	mock := &TaskContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
