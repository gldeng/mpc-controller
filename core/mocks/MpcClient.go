// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/avalido/mpc-controller/core"
	mock "github.com/stretchr/testify/mock"
)

// MpcClient is an autogenerated mock type for the MpcClient type
type MpcClient struct {
	mock.Mock
}

type MpcClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MpcClient) EXPECT() *MpcClient_Expecter {
	return &MpcClient_Expecter{mock: &_m.Mock}
}

// Keygen provides a mock function with given fields: ctx, req
func (_m *MpcClient) Keygen(ctx context.Context, req *core.KeygenRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.KeygenRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MpcClient_Keygen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keygen'
type MpcClient_Keygen_Call struct {
	*mock.Call
}

// Keygen is a helper method to define mock.On call
//  - ctx context.Context
//  - req *core.KeygenRequest
func (_e *MpcClient_Expecter) Keygen(ctx interface{}, req interface{}) *MpcClient_Keygen_Call {
	return &MpcClient_Keygen_Call{Call: _e.mock.On("Keygen", ctx, req)}
}

func (_c *MpcClient_Keygen_Call) Run(run func(ctx context.Context, req *core.KeygenRequest)) *MpcClient_Keygen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.KeygenRequest))
	})
	return _c
}

func (_c *MpcClient_Keygen_Call) Return(_a0 error) *MpcClient_Keygen_Call {
	_c.Call.Return(_a0)
	return _c
}

// Result provides a mock function with given fields: ctx, reqID
func (_m *MpcClient) Result(ctx context.Context, reqID string) (*core.Result, error) {
	ret := _m.Called(ctx, reqID)

	var r0 *core.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) *core.Result); ok {
		r0 = rf(ctx, reqID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, reqID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MpcClient_Result_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Result'
type MpcClient_Result_Call struct {
	*mock.Call
}

// Result is a helper method to define mock.On call
//  - ctx context.Context
//  - reqID string
func (_e *MpcClient_Expecter) Result(ctx interface{}, reqID interface{}) *MpcClient_Result_Call {
	return &MpcClient_Result_Call{Call: _e.mock.On("Result", ctx, reqID)}
}

func (_c *MpcClient_Result_Call) Run(run func(ctx context.Context, reqID string)) *MpcClient_Result_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MpcClient_Result_Call) Return(_a0 *core.Result, _a1 error) *MpcClient_Result_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Sign provides a mock function with given fields: ctx, req
func (_m *MpcClient) Sign(ctx context.Context, req *core.SignRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.SignRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MpcClient_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type MpcClient_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//  - ctx context.Context
//  - req *core.SignRequest
func (_e *MpcClient_Expecter) Sign(ctx interface{}, req interface{}) *MpcClient_Sign_Call {
	return &MpcClient_Sign_Call{Call: _e.mock.On("Sign", ctx, req)}
}

func (_c *MpcClient_Sign_Call) Run(run func(ctx context.Context, req *core.SignRequest)) *MpcClient_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.SignRequest))
	})
	return _c
}

func (_c *MpcClient_Sign_Call) Return(_a0 error) *MpcClient_Sign_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMpcClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMpcClient creates a new instance of MpcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMpcClient(t mockConstructorTestingTNewMpcClient) *MpcClient {
	mock := &MpcClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
