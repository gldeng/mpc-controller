// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dispatcher "github.com/avalido/mpc-controller/dispatcher"
	mock "github.com/stretchr/testify/mock"
)

// Dispatcherrer is an autogenerated mock type for the Dispatcherrer type
type Dispatcherrer struct {
	mock.Mock
}

type Dispatcherrer_Expecter struct {
	mock *mock.Mock
}

func (_m *Dispatcherrer) EXPECT() *Dispatcherrer_Expecter {
	return &Dispatcherrer_Expecter{mock: &_m.Mock}
}

// Channel provides a mock function with given fields:
func (_m *Dispatcherrer) Channel() chan *dispatcher.EventObject {
	ret := _m.Called()

	var r0 chan *dispatcher.EventObject
	if rf, ok := ret.Get(0).(func() chan *dispatcher.EventObject); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *dispatcher.EventObject)
		}
	}

	return r0
}

// Dispatcherrer_Channel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Channel'
type Dispatcherrer_Channel_Call struct {
	*mock.Call
}

// Channel is a helper method to define mock.On call
func (_e *Dispatcherrer_Expecter) Channel() *Dispatcherrer_Channel_Call {
	return &Dispatcherrer_Channel_Call{Call: _e.mock.On("Channel")}
}

func (_c *Dispatcherrer_Channel_Call) Run(run func()) *Dispatcherrer_Channel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Dispatcherrer_Channel_Call) Return(_a0 chan *dispatcher.EventObject) *Dispatcherrer_Channel_Call {
	_c.Call.Return(_a0)
	return _c
}

// Publish provides a mock function with given fields: ctx, evtObj
func (_m *Dispatcherrer) Publish(ctx context.Context, evtObj *dispatcher.EventObject) {
	_m.Called(ctx, evtObj)
}

// Dispatcherrer_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type Dispatcherrer_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//  - ctx context.Context
//  - evtObj *dispatcher.EventObject
func (_e *Dispatcherrer_Expecter) Publish(ctx interface{}, evtObj interface{}) *Dispatcherrer_Publish_Call {
	return &Dispatcherrer_Publish_Call{Call: _e.mock.On("Publish", ctx, evtObj)}
}

func (_c *Dispatcherrer_Publish_Call) Run(run func(ctx context.Context, evtObj *dispatcher.EventObject)) *Dispatcherrer_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dispatcher.EventObject))
	})
	return _c
}

func (_c *Dispatcherrer_Publish_Call) Return() *Dispatcherrer_Publish_Call {
	_c.Call.Return()
	return _c
}

// Subscribe provides a mock function with given fields: eT, eHs
func (_m *Dispatcherrer) Subscribe(eT dispatcher.Event, eHs ...dispatcher.EventHandler) {
	_va := make([]interface{}, len(eHs))
	for _i := range eHs {
		_va[_i] = eHs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, eT)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Dispatcherrer_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Dispatcherrer_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//  - eT dispatcher.Event
//  - eHs ...dispatcher.EventHandler
func (_e *Dispatcherrer_Expecter) Subscribe(eT interface{}, eHs ...interface{}) *Dispatcherrer_Subscribe_Call {
	return &Dispatcherrer_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{eT}, eHs...)...)}
}

func (_c *Dispatcherrer_Subscribe_Call) Run(run func(eT dispatcher.Event, eHs ...dispatcher.EventHandler)) *Dispatcherrer_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]dispatcher.EventHandler, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(dispatcher.EventHandler)
			}
		}
		run(args[0].(dispatcher.Event), variadicArgs...)
	})
	return _c
}

func (_c *Dispatcherrer_Subscribe_Call) Return() *Dispatcherrer_Subscribe_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewDispatcherrer interface {
	mock.TestingT
	Cleanup(func())
}

// NewDispatcherrer creates a new instance of Dispatcherrer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDispatcherrer(t mockConstructorTestingTNewDispatcherrer) *Dispatcherrer {
	mock := &Dispatcherrer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
