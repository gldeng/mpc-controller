package dispatcher

import (
	"context"
	"github.com/google/uuid"
	"time"
)

// Event can take all arguments of an event
type Event interface{}

// EventObject contains event ID, event type, event creator, event created time, event as well context.
// Especially, context can convey extra necessary information, e.g. deadline, canceling, error and even k-v values.
// ParentEvent is the event that trigger the event handler to emit the current event.
// If there's no parent(root event), ParentEvtNo and ParentEvtID should be the default value,
// namely uuid.UUID{} and uint64(0)
// Every event in the same event stream should share the same EvtStreamNo and EvtStreamID value,
// which originally generated by the root event.
type EventObject struct {
	EvtStreamNo uint64
	EvtStreamID uuid.UUID

	ParentEvtNo uint64
	ParentEvtID uuid.UUID

	EventNo   uint64
	EventID   uuid.UUID
	CreatedBy string
	CreatedAt time.Time

	Event   Event
	Context context.Context
}

// EventHandler is handler for events and takes any arguments.
// An event handler can be stateless or stateful.
// It's better to take effective measures for state persistence and resume for a stateful event handler.
// Besides, event handler can return immediately and choose to execute task in separate gorutines.
// In this way keep in mind do not let gorutine leak. It's handler's responsibility to ensure this security.
type EventHandler interface {
	Do(evtObj *EventObject)
}

// NewRootEventObject is convenience to create an root EventObject.
func NewRootEventObject(createdBy string, evt Event, ctx context.Context) *EventObject {
	streamUuid, _ := uuid.NewUUID()
	return NewEventObject(AddEventStreamCount(), streamUuid, uint64(0), uuid.UUID{},
		createdBy, evt, ctx)
}

// NewEventObject is convenience to create an EventObject.
func NewEventObject(evtStreamNo uint64, evtStreamID uuid.UUID, parentEvtNo uint64, parentEvtID uuid.UUID,
	createdBy string, evt Event, ctx context.Context) *EventObject {
	myUuid, _ := uuid.NewUUID()
	evtObj := EventObject{
		EvtStreamNo: evtStreamNo,
		EvtStreamID: evtStreamID,

		ParentEvtNo: parentEvtNo,
		ParentEvtID: parentEvtID,

		EventNo:   AddEventCount(),
		EventID:   myUuid,
		CreatedBy: createdBy,
		CreatedAt: time.Now(),

		Event:   evt,
		Context: ctx,
	}
	return &evtObj
}
