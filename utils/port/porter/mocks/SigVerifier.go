// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SigVerifier is an autogenerated mock type for the SigVerifier type
type SigVerifier struct {
	mock.Mock
}

type SigVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *SigVerifier) EXPECT() *SigVerifier_Expecter {
	return &SigVerifier_Expecter{mock: &_m.Mock}
}

// VerifySig provides a mock function with given fields: hash, signature
func (_m *SigVerifier) VerifySig(hash []byte, signature [65]byte) (bool, error) {
	ret := _m.Called(hash, signature)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, [65]byte) bool); ok {
		r0 = rf(hash, signature)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, [65]byte) error); ok {
		r1 = rf(hash, signature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SigVerifier_VerifySig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifySig'
type SigVerifier_VerifySig_Call struct {
	*mock.Call
}

// VerifySig is a helper method to define mock.On call
//  - hash []byte
//  - signature [65]byte
func (_e *SigVerifier_Expecter) VerifySig(hash interface{}, signature interface{}) *SigVerifier_VerifySig_Call {
	return &SigVerifier_VerifySig_Call{Call: _e.mock.On("VerifySig", hash, signature)}
}

func (_c *SigVerifier_VerifySig_Call) Run(run func(hash []byte, signature [65]byte)) *SigVerifier_VerifySig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([65]byte))
	})
	return _c
}

func (_c *SigVerifier_VerifySig_Call) Return(_a0 bool, _a1 error) *SigVerifier_VerifySig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewSigVerifier interface {
	mock.TestingT
	Cleanup(func())
}

// NewSigVerifier creates a new instance of SigVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSigVerifier(t mockConstructorTestingTNewSigVerifier) *SigVerifier {
	mock := &SigVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
