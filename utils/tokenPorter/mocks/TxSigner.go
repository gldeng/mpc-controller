// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TxSigner is an autogenerated mock type for the TxSigner type
type TxSigner struct {
	mock.Mock
}

// SignExportTx provides a mock function with given fields: ctx, exportTxHash
func (_m *TxSigner) SignExportTx(ctx context.Context, exportTxHash []byte) ([65]byte, error) {
	ret := _m.Called(ctx, exportTxHash)

	var r0 [65]byte
	if rf, ok := ret.Get(0).(func(context.Context, []byte) [65]byte); ok {
		r0 = rf(ctx, exportTxHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([65]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, exportTxHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignImportTx provides a mock function with given fields: ctx, importTxHash
func (_m *TxSigner) SignImportTx(ctx context.Context, importTxHash []byte) ([65]byte, error) {
	ret := _m.Called(ctx, importTxHash)

	var r0 [65]byte
	if rf, ok := ret.Get(0).(func(context.Context, []byte) [65]byte); ok {
		r0 = rf(ctx, importTxHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([65]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, importTxHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTxSigner interface {
	mock.TestingT
	Cleanup(func())
}

// NewTxSigner creates a new instance of TxSigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTxSigner(t mockConstructorTestingTNewTxSigner) *TxSigner {
	mock := &TxSigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
