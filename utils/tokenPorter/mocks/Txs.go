// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Txs is an autogenerated mock type for the Txs type
type Txs struct {
	mock.Mock
}

// ExportTxHash provides a mock function with given fields:
func (_m *Txs) ExportTxHash() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportTxHash provides a mock function with given fields:
func (_m *Txs) ImportTxHash() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetExportTxSig provides a mock function with given fields: exportTxSig
func (_m *Txs) SetExportTxSig(exportTxSig [65]byte) error {
	ret := _m.Called(exportTxSig)

	var r0 error
	if rf, ok := ret.Get(0).(func([65]byte) error); ok {
		r0 = rf(exportTxSig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetImportTxSig provides a mock function with given fields: importTxSig
func (_m *Txs) SetImportTxSig(importTxSig [65]byte) error {
	ret := _m.Called(importTxSig)

	var r0 error
	if rf, ok := ret.Get(0).(func([65]byte) error); ok {
		r0 = rf(importTxSig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignedExportTxBytes provides a mock function with given fields:
func (_m *Txs) SignedExportTxBytes() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignedImportTxBytes provides a mock function with given fields:
func (_m *Txs) SignedImportTxBytes() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTxs interface {
	mock.TestingT
	Cleanup(func())
}

// NewTxs creates a new instance of Txs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTxs(t mockConstructorTestingTNewTxs) *Txs {
	mock := &Txs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
