package avalido_staker

import (
	"crypto/ecdsa"
	"github.com/avalido/mpc-controller/logger"
	"github.com/avalido/mpc-controller/utils/network"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/stretchr/testify/suite"
	"math/big"
	"testing"
)

type AvaLidoTestSuite struct {
	suite.Suite
	coordinatorAddrHex string
	groupIdHex         string
	privateKeyHex      string

	log         logger.Logger
	cChainId    *big.Int
	avaLidoAddr *common.Address //
	cPrivateKey *ecdsa.PrivateKey
	cRpcClient  *ethclient.Client
	cWsClient   *ethclient.Client
}

func (suite *AvaLidoTestSuite) SetupTest() {
	logger.DevMode = true

	suite.log = logger.Default()
	suite.cChainId = big.NewInt(43112)

	privateKey, _ := crypto.HexToECDSA("56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027")
	suite.cPrivateKey = privateKey

	suite.cRpcClient = network.DefaultEthClient()
	suite.cWsClient = network.DefaultWsEthClient()
	//
	//avaLidoBytecode := `608060405260405161071d38038061071d8339818101604052810190610025919061010f565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dc826100b1565b9050919050565b6100ec816100d1565b81146100f757600080fd5b50565b600081519050610109816100e3565b92915050565b600060208284031215610125576101246100ac565b5b6000610133848285016100fa565b91505092915050565b6105d28061014b6000396000f3fe6080604052600436106100435760003560e01c806312065fe01461004f5780637286bf2f1461007a578063846b3c8b146100a5578063da52ab60146100d05761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b5061006461010d565b60405161007191906102bb565b60405180910390f35b34801561008657600080fd5b5061008f610115565b60405161009c9190610317565b60405180910390f35b3480156100b157600080fd5b506100ba610139565b6040516100c79190610391565b60405180910390f35b3480156100dc57600080fd5b506100f760048036038101906100f291906103dd565b61015f565b60405161010491906102bb565b60405180910390f35b600047905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156101c8573d6000803e3d6000fd5b506000601e426101d89190610439565b9050600062127500826101eb9190610439565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636cfb1929604051806060016040528060288152602001610575602891398685856040518563ffffffff1660e01b81526004016102669493929190610528565b600060405180830381600087803b15801561028057600080fd5b505af1158015610294573d6000803e3d6000fd5b505050508392505050919050565b6000819050919050565b6102b5816102a2565b82525050565b60006020820190506102d060008301846102ac565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610301826102d6565b9050919050565b610311816102f6565b82525050565b600060208201905061032c6000830184610308565b92915050565b6000819050919050565b600061035761035261034d846102d6565b610332565b6102d6565b9050919050565b60006103698261033c565b9050919050565b600061037b8261035e565b9050919050565b61038b81610370565b82525050565b60006020820190506103a66000830184610382565b92915050565b600080fd5b6103ba816102a2565b81146103c557600080fd5b50565b6000813590506103d7816103b1565b92915050565b6000602082840312156103f3576103f26103ac565b5b6000610401848285016103c8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610444826102a2565b915061044f836102a2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156104845761048361040a565b5b828201905092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104c95780820151818401526020810190506104ae565b838111156104d8576000848401525b50505050565b6000601f19601f8301169050919050565b60006104fa8261048f565b610504818561049a565b93506105148185602086016104ab565b61051d816104de565b840191505092915050565b6000608082019050818103600083015261054281876104ef565b905061055160208301866102ac565b61055e60408301856102ac565b61056b60608301846102ac565b9594505050505056fe4e6f646549442d50376f42324d636a42476757324e58585756596a56384a4544466f573978444535a2646970667358221220188c2a168adf211bee03362b295ec9ccf3cf2bac5c528f67ff2846001c7b42fd64736f6c634300080a0033`
	//deployedAddr, err := contract.Deploy(suite.log, suite.cChainId, suite.cRpcClient, suite.cPrivateKey, avaLidoBytecode)
	//suite.log.FatalOnError(err, "Failed to deploy smart contract")
	//suite.avaLidoAddr = deployedAddr

	deployedAdrr := common.HexToAddress("0x1B0605618d8Cb10DFE75db5c6b57220F81278628")
	suite.avaLidoAddr = &deployedAdrr
}

func (suite *AvaLidoTestSuite) TestInitiateStake() {
	require := suite.Require()

	a := New(suite.log, suite.cChainId, suite.avaLidoAddr, suite.cPrivateKey, suite.cRpcClient, suite.cWsClient)
	err := a.InitiateStake(big.NewInt(25_000_000_000))
	require.Nil(err)
}

func TestAvaLidoTestSuite(t *testing.T) {
	suite.Run(t, new(AvaLidoTestSuite))
}
